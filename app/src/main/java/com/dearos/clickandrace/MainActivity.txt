package com.example.clickandrace

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.ui.Modifier
import com.example.clickandrace.ui.AppNav
import com.example.clickandrace.ui.navigation.BottomNavBar
import com.example.clickandrace.ui.theme.ClickAndRaceTheme
import com.google.firebase.Firebase
import com.google.firebase.analytics.analytics
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser

class MainActivity : ComponentActivity() {


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()




        setContent {
            ClickAndRaceTheme {
//                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
//                    Greeting(
//                        name = "Android",
//                        modifier = Modifier.padding(innerPadding)
//                    )




                    Scaffold(
                        bottomBar = {
                            /*  currentBackStackEntryAsState() convierte el estado actual del back stack (pilas de navegación) en un State observable por Compose.
                                value?.destination recupera el destino actual (la pantalla en la que estamos) del estado de navegación */

                                BottomNavBar( )

                        }
                    )
                    {
                        padding ->

                        // Llamar a AppNavigation
                        AppNav(
//                            navController = navController,
//                            isFirstLaunch = isFirstLaunch,
//                            onSetupCompleted = { name, isAdult, prefersDarkTheme ->
//                                val updatedPerson = Person(name, isAdult, prefersDarkTheme, true)
//                                isDarkTheme = prefersDarkTheme
//                                savePersonToPreferences(updatedPerson, sharedPreferences)
//                                isFirstLaunch = false
//                            },
                              modifier = Modifier.padding(padding),
//                            sharedPreferences = sharedPreferences
                        )
                    }


                }
            }
        }

}


//@Composable
//fun Greeting(name: String, modifier: Modifier = Modifier) {
//    Text(
//        text = "Hello $name!,App test C.A.R.",
//        modifier = modifier
//    )
//}
//
//@Preview(showBackground = true)
//@Composable
//fun GreetingPreview() {
//    ClickAndRaceTheme {
//        Greeting("Android")
//    }
//}